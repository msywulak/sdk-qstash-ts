{"version":3,"sources":["../src/receiver.ts"],"sourcesContent":["import * as jose from \"jose\";\nimport * as crypto from \"crypto-js\";\n\n/**\n * Necessary to verify the signature of a request.\n */\nexport type ReceiverConfig = {\n  /**\n   * The current signing key. Get it from `https://console.upstash.com/qstash\n   */\n  currentSigningKey: string;\n  /**\n   * The next signing key. Get it from `https://console.upstash.com/qstash\n   */\n  nextSigningKey: string;\n};\n\nexport type VerifyRequest = {\n  /**\n   * The signature from the `upstash-signature` header.\n   */\n  signature: string;\n\n  /**\n   * The raw request body.\n   */\n  body: string;\n\n  /**\n   * URL of the endpoint where the request was sent to.\n   *\n   * Omit empty to disable checking the url.\n   */\n  url?: string;\n\n  /**\n   * Number of seconds to tolerate when checking `nbf` and `exp` claims, to deal with small clock differences among different servers\n   *\n   * @default 0\n   */\n  clockTolerance?: number;\n};\n\nexport class SignatureError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"SignatureError\";\n  }\n}\n/**\n * Receiver offers a simlpe way to verify the signature of a request.\n */\nexport class Receiver {\n  private readonly currentSigningKey: string;\n  private readonly nextSigningKey: string;\n\n  constructor(config: ReceiverConfig) {\n    this.currentSigningKey = config.currentSigningKey;\n    this.nextSigningKey = config.nextSigningKey;\n  }\n\n  /**\n   * Verify the signature of a request.\n   *\n   * Tries to verify the signature with the current signing key.\n   * If that fails, maybe because you have rotated the keys recently, it will\n   * try to verify the signature with the next signing key.\n   *\n   * If that fails, the signature is invalid and a `SignatureError` is thrown.\n   */\n  public async verify(req: VerifyRequest): Promise<boolean> {\n    const isValid = await this.verifyWithKey(this.currentSigningKey, req);\n    if (isValid) {\n      return true;\n    }\n    return this.verifyWithKey(this.nextSigningKey, req);\n  }\n\n  /**\n   * Verify signature with a specific signing key\n   */\n  private async verifyWithKey(key: string, req: VerifyRequest): Promise<boolean> {\n    const jwt = await jose\n      .jwtVerify(req.signature, new TextEncoder().encode(key), {\n        issuer: \"Upstash\",\n        clockTolerance: req.clockTolerance,\n      })\n      .catch((e) => {\n        throw new SignatureError((e as Error).message);\n      });\n\n    const p = jwt.payload as {\n      iss: string;\n      sub: string;\n      exp: number;\n      nbf: number;\n      iat: number;\n      jti: string;\n      body: string;\n    };\n\n    if (typeof req.url !== \"undefined\" && p.sub !== req.url) {\n      throw new SignatureError(`invalid subject: ${p.sub}, want: ${req.url}`);\n    }\n\n    const bodyHash = crypto.SHA256(req.body as string).toString(crypto.enc.Base64url);\n\n    const padding = new RegExp(/=+$/);\n\n    if (p.body.replace(padding, \"\") !== bodyHash.replace(padding, \"\")) {\n      throw new SignatureError(`body hash does not match, want: ${p.body}, got: ${bodyHash}`);\n    }\n\n    return true;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAY,UAAU;AACtB,YAAY,YAAY;AA0CjB,IAAM,iBAAN,cAA6B,MAAM;AAAA,EACxC,YAAY,SAAiB;AAC3B,UAAM,OAAO;AACb,SAAK,OAAO;AAAA,EACd;AACF;AAIO,IAAM,WAAN,MAAe;AAAA,EAIpB,YAAY,QAAwB;AAClC,SAAK,oBAAoB,OAAO;AAChC,SAAK,iBAAiB,OAAO;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWa,OAAO,KAAsC;AAAA;AACxD,YAAM,UAAU,MAAM,KAAK,cAAc,KAAK,mBAAmB,GAAG;AACpE,UAAI,SAAS;AACX,eAAO;AAAA,MACT;AACA,aAAO,KAAK,cAAc,KAAK,gBAAgB,GAAG;AAAA,IACpD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKc,cAAc,KAAa,KAAsC;AAAA;AAC7E,YAAM,MAAM,MACT,eAAU,IAAI,WAAW,IAAI,YAAY,EAAE,OAAO,GAAG,GAAG;AAAA,QACvD,QAAQ;AAAA,QACR,gBAAgB,IAAI;AAAA,MACtB,CAAC,EACA,MAAM,CAAC,MAAM;AACZ,cAAM,IAAI,eAAgB,EAAY,OAAO;AAAA,MAC/C,CAAC;AAEH,YAAM,IAAI,IAAI;AAUd,UAAI,OAAO,IAAI,QAAQ,eAAe,EAAE,QAAQ,IAAI,KAAK;AACvD,cAAM,IAAI,eAAe,oBAAoB,EAAE,GAAG,WAAW,IAAI,GAAG,EAAE;AAAA,MACxE;AAEA,YAAM,WAAkB,cAAO,IAAI,IAAc,EAAE,SAAgB,WAAI,SAAS;AAEhF,YAAM,UAAU,IAAI,OAAO,KAAK;AAEhC,UAAI,EAAE,KAAK,QAAQ,SAAS,EAAE,MAAM,SAAS,QAAQ,SAAS,EAAE,GAAG;AACjE,cAAM,IAAI,eAAe,mCAAmC,EAAE,IAAI,UAAU,QAAQ,EAAE;AAAA,MACxF;AAEA,aAAO;AAAA,IACT;AAAA;AACF;","names":[]}